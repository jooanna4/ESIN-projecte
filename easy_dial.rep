/*
    He escollit l'estructura d'un arbre digital TST per fer aquesta classe. 
    Cada node conté una lletra de cada nom inserit. Per intentar fer-ho més
    eficient, he inserit en cada node el telèfon més gran dels seus fills,
    amb això i l'atribut _npref, que guarda el node de l'últim caràcter del
    prefix actual, volia que les funcions de inici(), seguent() i num_telf()
    fossin el menys costoses possible, cosa que no he pogut assolir.


*/

struct node_tst {
    char _c;
    node_tst *_esq;
    node_tst *_dret;
    node_tst *_cen;
    phone _telf;
};

node_tst *_npref;   // Node a l'últim caracter del prefix en curs on conté el phone amb mes frequencia del prefix en curs
node_tst *_arrel;   // Node que apunta a l'arrel del trie
string _pref;       // Prefix en curs
bool _prefindef;    // True si el prefix _pref es troba indefinit
                    // Si es false i _pref == "", el prefix és buit
bool _hihatelefon;  // Existeix telèfon amb prefix _pref que no hagi sortit abans al easy dial?

static node_tst *insereix_nom(node_tst *n, const string& nom, nat i, phone& ph);
static node_tst *copia_tst(node_tst *n);
static void esborra_tst(node_tst *n);
static void primer_phone(node_tst* n, phone &tel);
static node_tst *consultapref(node_tst *n, string pref);
static void comencen(node_tst *n, vector<string>& result);
void reset();
void longitudm(node_tst *n, nat i, double &freq, double &acumfp) const;
