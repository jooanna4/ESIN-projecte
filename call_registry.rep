/*
    Hem escollit l'estructura AVL ordenada per ordre de números de
    telèfon ja que aquests, segons l'enunciat, no es poden repetir.
    A més, és una estructura amb un nombre de dades no limitat.
    En la majoria de funcions, hem de recòrrer l'arbre des de l'arrel 
    a qualsevol fulla, això vol dir que els seus costos son de θ(h),
    sent h la seva alçada. En aquesta estructura (AVL), el cost
    d'aquestes operacions serà de θ(log (n)).
*/

struct node {
    phone _ph;          // Informació del node
    node* _esq;         // Punter al fill esquerre
    node* _dret;        // Punter al fill dret
    nat _altura;        // Factor d'equilibri de l'AVL
};
node* _arrel;           // Punter a l'arrel de l'arbre
nat _mida;              // Número de telefons que hi ha en l'arbre AVL

// Metodes privats
static nat altura(node *n);
static int factor_equilibri(node *n);
static node* busca(node *n, nat num);
static void rec_inordre(node *n, vector<phone>& V);

// Mètodes privats per la constructora i destructora
static node* copia_arbre(node *n);
static void esborra_arbre(node *n);

// Metodes privats per inserir i eliminar un numero a l'AVL
node* insereix_numero(node *n, nat num, const string& name, nat compt);
static node* rotacio_esquerra(node *n);
static node* rotacio_dreta(node *n);
node* elimina_numero(node *n, nat num);